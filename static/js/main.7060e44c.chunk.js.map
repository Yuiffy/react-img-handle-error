{"version":3,"sources":["ImgPage.js","CssPage.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["images","logo","ImgPage","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","imgIndexA","changeImage","bind","assertThisInitialized","stateName","length","newIndex","setState","defineProperty","_this2","react_default","a","createElement","className","src","alt","onError","e","console","log","target","rel","onClick","Component","arrayToBackground","array","map","url","concat","join","CssPage","backgroundImage","style","App","page","ThePage","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.7060e44c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst images = ['static/ki-ringtone.mp3', 'static/image1.jpg', logo];\n\nclass ImgPage extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      imgIndexA: 0\n    };\n    this.changeImage = this.changeImage.bind(this);\n  }\n\n  changeImage(stateName, images) {\n    const length = images.length;\n    const { [stateName]: originIndex } = this.state;\n    const newIndex = (originIndex + 1) % length;\n    this.setState({ [stateName]: newIndex });\n  }\n\n  render() {\n    const { imgIndexA } = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={images[imgIndexA]} className=\"App-logo\" alt=\"logo\"\n               onError={(e) => {\n                 console.log(\"image error\", e);\n                 this.changeImage('imgIndexA', images);\n               }}\n          />\n          <p>\n            use onError=... on <code>&lt;img /></code> to handle image load error.\n            see the console to see error info.\n          </p>\n          <a\n            className=\"App-link\"\n            // href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            onClick={() => {\n              this.setState({ imgIndexA: 0 });\n            }}\n          >Reset to 0</a>\n          <a className=\"App-link\" onClick={() => {\n            this.changeImage('imgIndexA', images);\n          }}>Next</a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default ImgPage;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst images = ['static/ki-ringtone.mp3', 'static/image1.jpg', logo];\n\nconst arrayToBackground = (array) => {\n  return array.map(url => `url(\"${url}\")`).join(', ');\n};\n\nclass CssPage extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      backgroundImage: arrayToBackground(images)\n    };\n    this.changeImage = this.changeImage.bind(this);\n  }\n\n  changeImage(stateName, images) {\n    const length = images.length;\n    const { [stateName]: originIndex } = this.state;\n    const newIndex = (originIndex + 1) % length;\n    this.setState({ [stateName]: newIndex });\n  }\n\n  render() {\n    const { backgroundImage } = this.state;\n    console.log('backgroundImage', backgroundImage);\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"App-logo App-logo2\" style={{ backgroundImage }} />\n          <p>\n            use style to set many image, if one error, will load next.\n            <br/>\n            background-image: {backgroundImage};\n            <br/>\n            use Chrome Tool --- Network Page, can see it will request the first of array, if error then request second.\n          </p>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default CssPage;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ImgPage from \"./ImgPage\";\nimport CssPage from \"./CssPage\";\n\nconst images = [ImgPage];\n\nclass App extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      page: ImgPage\n    };\n  }\n\n  render() {\n    const { page:ThePage } = this.state;\n    return (\n      <div style={{backgroundColor: 'black'}}>\n        <button className='button'  onClick={() => {\n          this.setState({ page: ImgPage });\n        }}>&lt;img></button>\n        <button className='button' onClick={() => {\n          this.setState({ page: CssPage });\n        }}>css background</button>\n        <ThePage></ThePage>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}